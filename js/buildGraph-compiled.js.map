{"version":3,"sources":["buildGraph.js"],"names":[],"mappings":";;;;;;;;;;;;;AAAA;;;AAGA;;;;;UAmCgB,I,GAAA,I;;;;;;;;;;;;AA9BhB,WAAS,QAAT,CAAkB,IAAlB,EAAwB;AAAA;;AACtB,WAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAoB;AACrC,uBAAE,IAAF,CAAO,IAAP,EAAa,EAAC,UAAU,MAAX,EAAb,EACK,IADL,CACU,UAAC,GAAD,EAAQ;AACZ,YAAI,IAAI,EAAR;AACA,YAAI,IAAI,EAAR;AACA,YAAI,KAAJ,CAAU,IAAV,EAAgB,GAAhB,CAAoB,UAAC,IAAD,EAAS;AAC3B,cAAI,CAAC,KAAK,KAAL,CAAW,2CAAX,CAAL,EAA8D;AAC5D,oBAAQ,GAAR,CAAY,oBAAZ,EAAkC,IAAlC;AACA,mBAAO,KAAP;AACD;AACD,cAAI,IAAI,KAAK,KAAL,CAAW,IAAX,CAAR;AACA,cAAI,SAAS,EAAE,CAAF,CAAT,IAAe,IAAnB,EAAyB;AACvB,oBAAQ,GAAR,CAAY,mBAAZ,EAAiC,CAAjC;AACA,mBAAO,KAAP;AACD;AACD,YAAE,IAAF,CAAO,EAAE,CAAF,CAAP;AACA,YAAE,IAAF,CAAO,EAAE,CAAF,CAAP;AACA,iBAAO,IAAP;AACD,SAbD;AAcA,gBAAQ,CAAC,EAAC,GAAG,CAAJ,EAAO,GAAG,CAAV,EAAD,CAAR;AACD,OAnBL,EAoBK,KApBL,CAoBW,YAAK;AACV,gBAAQ,GAAR,CAAY,gBAAZ,EAA8B,UAA9B;AACA,cAAM,eAAN;AACA;AACD,OAxBL;AAyBD,KA1BM,CAAP;AA2BD;;AAEM,WAAS,IAAT,CAAc,MAAd,EAAgD;AAAA,QAA1B,QAA0B,uEAAf,aAAe;;AACrD,QAAI,OAAO,MAAP,IAAkB,QAAtB,EAAgC,SAAS,SAAS,cAAT,CAAwB,MAAxB,CAAT;AAChC,QAAI,cAAc,SAAS,QAAT,CAAlB;AACA,QAAI,SAAS;AACX,aAAO,mBADI;AAEX,aAAO;AACL,eAAO,MADF;AAEL,kBAAU;AAFL,OAFI;AAMX,aAAO;AACL,eAAO;AADF;AANI,KAAb;AAUA,QAAI,SAAS;AACX,kBAAY,IADD;AAEX,mBAAa,IAFF;AAGX,sBAAgB;AAHL,KAAb;AAKA,gBAAY,IAAZ,CAAiB,UAAC,IAAD;AAAA,aAAQ,iBAAO,IAAP,CAAY,MAAZ,EAAoB,IAApB,EAA0B,MAA1B,EAAkC,MAAlC,CAAR;AAAA,KAAjB;AACD","file":"buildGraph-compiled.js","sourcesContent":["/**\n * Created by alpaca on 3/25/16.\n */\n\"use strict\";\n\nimport plotly from \"plotly\";\nimport $ from \"jquery\";\n \nfunction loadFile(name) {\n  return new Promise((resolve, reject)=> {\n    $.ajax(name, {dataType: \"text\"})\n        .done((raw)=> {\n          let x = [];\n          let y = [];\n          raw.split(\"\\n\").map((line)=> {\n            if (!line.match(/^\\d{4}-\\d\\d-\\d\\d \\d{0,2}:\\d\\d:\\d\\d\\s\\d+\\s/)) {\n              console.log('Invalid input line', line);\n              return false;\n            }\n            let t = line.split('\\t');\n            if (parseInt(t[1])>3000) {\n              console.log('Invalid ppa value', t);\n              return false;\n            }\n            x.push(t[0]);\n            y.push(t[1]);\n            return null;\n          });\n          resolve([{x: x, y: y}]);\n        })\n        .error(()=> {\n          console.log(\"loading error \", arguments);\n          alert(\"loading error\");\n          reject();\n        });\n  })\n}\n\nexport function plot(target, filename = \"example.log\") {\n  if (typeof(target) == 'string') target = document.getElementById(target);\n  let dataPromise = loadFile(filename);\n  let layout = {\n    title: 'CO2 concentration',\n    xaxis: {\n      title: 'Time',\n      showgrid: false\n    },\n    yaxis: {\n      title: 'CO2 ppa'\n    }\n  };\n  let config = {\n    scrollZoom: true,\n    autosizable: true,\n    displayModeBar: true\n  };\n  dataPromise.then((data)=>plotly.plot(target, data, layout, config));\n}\n"]}